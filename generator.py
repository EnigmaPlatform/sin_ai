import json
import random
from uuid import uuid4
from datetime import datetime

# Исправлены опечатки в названиях категорий
CATEGORIES = {
    "Технологии": [
        "смартфоны", "ноутбуки", "искусственный интеллект", "гаджеты", "программирование",
        "кибербезопасность", "робототехника", "нейросети", "виртуальная реальность", "блокчейн"
    ],
    "Наука": [
        "физика", "химия", "биология", "астрономия", "математика",
        "генетика", "квантовая механика", "нанотехнологии", "экология", "геология"
    ],
    "Развлечения": [
        "фильмы", "музыка", "игры", "книги", "знаменитости",
        "сериалы", "аниме", "комиксы", "стриминговые платформы", "кинофестивали"
    ],
    "Повседневная жизнь": [
        "кулинария", "шоппинг", "путешествия", "здоровье", "фитнес",
        "домашние животные", "сад и огород", "ремонт", "мода", "красота"
    ],
    "Автомобили": [
        "электромобили", "тюнинг", "гоночные авто", "ремонт", "марки машин",
        "мотоциклы", "автопутешествия", "автоспорт", "гибридные двигатели", "автоаксессуары"
    ],
    "Спорт": [
        "футбол", "хоккей", "теннис", "баскетбол", "бокс",
        "плавание", "легкая атлетика", "велоспорт", "горные лыжи", "единоборства"
    ],
    "Искусство": [
        "живопись", "скульптура", "фотография", "архитектура", "граффити",
        "дизайн", "цифровое искусство", "уличное искусство", "искусство перформанса"
    ],
    "Экономика": [
        "криптовалюты", "фондовый рынок", "недвижимость", "стартапы", "банки",
        "инвестиции", "фриланс", "удаленная работа", "бизнес-стратегии"
    ],
    "Образование": [
        "вузы", "онлайн-курсы", "языковые школы", "репетиторство", "стажировки",
        "гранты", "научные публикации", "дистанционное обучение", "профориентация"
    ],
    "Психология": [
        "отношения", "саморазвитие", "стресс-менеджмент", "детская психология", "лидерство",
        "мотивация", "неврозы", "межличностные коммуникации", "когнитивные искажения"
    ],
    "Политика": [
        "международные отношения", "выборы", "законодательство", "политтехнологии", "государственное управление",
        "социальные программы", "партии", "лоббизм", "политические кризисы"
    ],
    "История": [
        "древний мир", "средние века", "ренессанс", "новое время", "современная история",
        "военная история", "археология", "история науки", "история искусства"
    ]
}

EMOTIONS = ["нейтральный", "игривый", "образовательный", "смешной", "серьёзный", 
            "дружелюбный", "вдохновляющий", "критический", "саркастичный", "философский"]
LEVELS = ["лёгкий", "средний", "сложный", "экспертный"]

PHRASES = {
    "вопросы": [
        "Что ты думаешь о {topic}?",
        "Как тебе {topic} в последнее время?",
        "Расскажи подробнее про {topic}",
        "Почему {topic} стал таким популярным?",
        "Объясни {topic} как для пятилетнего ребенка",
        "В чём главная особенность {topic}?",
        "Какое у тебя сложилось мнение о {topic}?",
        "С чего лучше начать знакомство с {topic}?",
        "Какие малоизвестные факты о {topic} ты знаешь?",
        "Как ты относишься к современному развитию {topic}?"
    ],
    "ответы": [
        "Я считаю, что {topic} — это {opinion}",
        "Если честно, {topic} мне {opinion}",
        "На мой взгляд, {topic} {opinion}",
        "Многие эксперты сходятся во мнении, что {topic} {opinion}",
        "По моему опыту, {topic} {opinion}",
        "Недавние исследования показывают, что {topic} {opinion}",
        "Судя по последним данным, {topic} {opinion}",
        "Как специалист скажу — {topic} {opinion}"
    ],
    "мнения": [
        "очень перспективное направление",
        "гораздо сложнее, чем кажется на первый взгляд",
        "заслуживает более пристального внимания",
        "имеет множество неочевидных нюансов",
        "переживает настоящий расцвет в последние годы"
    ]
}

def generate_question(topic):
    return random.choice(PHRASES["вопросы"]).format(topic=topic)

def generate_answer(topic):
    opinion = random.choice(PHRASES["мнения"])
    answer_template = random.choice(PHRASES["ответы"])
    
    if random.random() < 0.3:
        additional_info = [
            f" Например, {random.choice(PHRASES['мнения'])}.",
            f" Это видно по {random.choice(['последним исследованиям', 'историческим примерам'])}."
        ]
        return answer_template.format(topic=topic, opinion=opinion) + random.choice(additional_info)
    
    return answer_template.format(topic=topic, opinion=opinion)

def generate_responses(topic, category):  # Добавлен параметр category
    responses = []
    for _ in range(random.randint(1, 4)):
        response = {
            "text": generate_answer(topic),
            "meta": {
                "difficulty": random.choice(LEVELS),
                "emotion": random.choice(EMOTIONS),
                "slang": random.random() > 0.9,
                "length": random.choice(["краткий", "развернутый"]),
                "category": category  # Добавляем категорию в метаданные
            }
        }
        
        if response["meta"]["difficulty"] in ["сложный", "экспертный"]:
            jargon = {
                "Технологии": ["алгоритмизация", "аппаратная часть"],
                "Наука": ["эмпирические данные", "методология"],
                "Экономика": ["ликвидность", "капитализация"]
            }
            if category in jargon:
                response["text"] += f" {random.choice(jargon[category])} играет ключевую роль."
        
        responses.append(response)
    return responses

def generate_dialogue():
    category = random.choice(list(CATEGORIES.keys()))
    subcategory = random.choice(CATEGORIES[category])
    
    dialogue = {
        "category": category,
        "subcategory": subcategory,
        "user_query": generate_question(subcategory),
        "responses": generate_responses(subcategory, category)  # Передаем category
    }
    
    dialogue["meta"] = {
        "complexity": random.choice(["базовый", "продвинутый"]),
        "relevance": random.randint(1, 10)
    }
    
    return dialogue

def generate_dataset(num_dialogues=10000):
    return {
        "dialogues": [generate_dialogue() for _ in range(num_dialogues)],
        "metadata": {
            "version": "2.1",
            "created_at": datetime.now().isoformat(),
            "categories_count": len(CATEGORIES)
        }
    }

dataset = generate_dataset()
with open("russian_dialogues_fixed.json", "w", encoding="utf-8") as f:
    json.dump(dataset, f, ensure_ascii=False, indent=2)

print(f"Создан исправленный датасет с {len(dataset['dialogues'])} диалогами")
